#!/usr/bin/perl

use strict;
use warnings;
use lib do {
    use Cwd        'realpath';   # resolves symlinks
    use File::Spec 'splitpath';  # extract dir/file name
    (File::Spec->splitpath(realpath($0)))[1];
};
use KA::Klingon;

my %cfg = (
    verbose => '',
    # things for regexes
    re_alph => "'0-9A-Za-z".                       # alphabetical characters
        "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝÞß".         #   (note that apostrophe
        "àáâãäåæçèéêëìíîïðñòóôõöøùúûüýþÿ",         #   is included)
);

sub verb {
    return("") unless $cfg{verbose};
    print @_ if @_;
    return(1);
}

# resolve hypenation and remove comments
sub apply_corrections {
    my (@text) = @_;
    foreach (wantarray ? @text : $text[0]) {
	s/(?<=[$cfg{re_alph}])[-­] *\Q[[keep hyphen]]\E\n/-/g; # keep hyphen
	s/(?<=[$cfg{re_alph}])[-­]\n//g;       # remove hypenation
	s/(?<=[-­][-­])\n//g;                  # keep en-dashes
        # remove comments & perform corrections
        while (s{ \s* \[\[
                  (?:
                      ([^]]*) := ([^]]*)      # corrections
                  |
                      [^]]*                   # other comments
                  )
               \]\] $}{}x) {
            next unless defined($1);
            my ($a, $b) = ($1, $2);
            $a =~ s/([().])/\\$1/g;
            for ($a, $b) { s/[\\]n/\n/g }
            s{$a}{$b}g;
        }
    }
    return wantarray ? @text : $text[0];
}

my %klingon_string = ();
{
    my $text = "";
    while (<>) {
        $_ = apply_corrections($_);
        chomp($_);

        s/^\s*/ /;
        $text .= $_;
        while ($text =~ s/ ^ .*? \{ ([^}]*) \} //xs) {
            push @{$klingon_string{$1}}, "$ARGV:$.";
        }
        close(ARGV) if eof;
    }
}

# sort by source reference
sub by_source {
    # get FILENAME:LINENUMBER strings
    my ($a, $b) = (${$klingon_string{$a}}[0], ${$klingon_string{$b}}[0]);
    # extract filename & line number
    my ($file1, $line1, $file2, $line2) = map {
        defined($_) ? /^(.*):(\d+)$/ : ("", 0);
    } ($a, $b);
    return ($file1 cmp $file2) || ($line1 <=> $line2);
}

foreach my $phrase (sort by_source keys %klingon_string) {
    my $bad = 0;
    my $out = "";
    my @word = KA::Klingon::phrase_split($phrase);
  WORD: foreach (@word) {
        # single character
        if (m/^(?:[abDeHIjlmnopqQrStuvwy']|ch|gh|ng|tlh)$/) {
            $out .= "    (c)\t$_\n";
            next WORD;
        }
        # lone suffix
        if (s/^-//) {
            my @syllable = KA::Klingon::syllable_split($_);
            if (@syllable == 1) {
                $out .= "    (s)\t-$_\n";
                next WORD;
            }
        }
        # lone prefix
        if (s/-$//) {
            my @syllable = KA::Klingon::syllable_split($_);
            if (@syllable == 1) {
                $out .= "    (p)\t$_-\n";
                next WORD;
            }
        }
        # multi-syllable, Klingon word
        my @syllable = KA::Klingon::syllable_split($_);
        if (@syllable) {
            $out .= "    (" . @syllable . ")\t" .
                join("-", @syllable) . "\n";
            next WORD;
        }
        # ERROR: unrecognized word
        $out .= "    ---\t$_\n";
        $bad = 1;
    }
    # output
    if ($bad or $cfg{verbose}) {
        print(
            ($bad ? "ERROR: " : "") . "{$phrase}\n",
            $out,
            map("    $_\n", sort by_source @{$klingon_string{$phrase}}),
            "\n",
        );
    }
}

#[eof]

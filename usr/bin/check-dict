#!/usr/bin/perl
use strict;
use warnings;
use 5.10.0;
use utf8;
use open ':locale';
use lib do {
    use Cwd 'realpath';
    realpath($0) =~ m#^(.*)/#;
};

if (-t STDIN and @ARGV == 0) {
    print <<"EOF";
Usage: $0 [<] FILE
Perform various syntax/consistency checks of a the KA dictionary.
EOF
    exit;
}

my %cfg = (
    canon_path     => "../../canon", # relative to executable's path
    field_order    => [ qw(tlh  warn  pos  sv   en   desc  def
                           ref  cite  com  pun  see  cat  data  file  meta) ],
    field_required => [ qw(tlh pos sv en def file) ],
    field_multiple => { cite => 1 },
    field_subs     => {
        tlh  => \&check_tlh,
        warn => \&check_warn,
        pos  => \&check_pos,
        en   => \&check_en,
        sv   => \&check_sv,
        desc => \&check_desc,
        def  => \&check_source,
        ref  => \&check_source,
        cite => \&check_cite,
        com  => \&check_com,
        see  => \&check_see,
        data => \&check_data,
        file => \&check_file,
        meta => \&check_meta,
    },
);

# absolutify path to canon files
$cfg{canon_path} = do {
    use Cwd 'realpath';             # scripts absolute name
    my $script = realpath($0);
    use File::Spec 'splitpath';     # dir part of scripts name
    my ($volume, $scriptdir) = File::Spec->splitpath($script);
    realpath($scriptdir . "/" . $cfg{canon_path});
};


###############################################################################
##                                                                           ##
##  Functions                                                                ##
##                                                                           ##
###############################################################################

sub sortkey_tlh {
    my ($_) = @_;
    # %alph{klingon_letter} = sort_key
    my %alph = (
        a   => 'a',   b => 'b',   ch => 'c',   D => 'd',   e => 'e',
        gh  => 'f',   H => 'g',   I  => 'h',   j => 'i',   l => 'j',
        m   => 'k',   n => 'l',   ng => 'm',   o => 'n',   p => 'o',
        q   => 'p',   Q => 'q',   r  => 'r',   S => 's',   t => 't',
        tlh => 'u',   u => 'v',   v  => 'w',   w => 'x',   y => 'y',
        "'" => 'z',
    );

    # strip non-alphabetical chars
    s/[^a-zA-Z']//g;

    # replace alpha chars with sort count
    my $re1 = join("|", sort keys %alph);
    s{($re1)(?=($re1)*$)}{ $alph{$1} }eg;

    return $_;
}


###############################################################################
##                                                                           ##
##  Functions                                                                ##
##                                                                           ##
###############################################################################

sub TRUE  {  1 }
sub FALSE { '' }

sub numerically { $a <=> $b }

sub check_en {
    my ($_, $field, $record) = @_;
    # may not end in puctuation (question mark is okay)
    warn "content of '$field' field may not end with space/punctuation\n"
        if /[-!.,:;([{<«  ]$/;
    if (/\((v|n|name|adv|conj|excl|num|pro|ques|ns[1-5]|vp|vs[1-9r])\)/m) {
        warn "part-of-speech '($1)' must not be given inside '$field' field\n";
        print STDERR "    $field: $_\n";
    }
    # «...» or <...> are required except for affixes
    if (!/[«<]/ and $record !~ /^pos:.*\b(suf|pre)fix\b/m) {
        warn "missing «...» or <...> brackets in '$field' $field\n";
        print STDERR "    $field: $_\n";
    }
    { # check for matching <...>
        my $bra = () = m/</g;  # count "<"
        my $ket = () = m/>/g;  # count ">"
        warn "mismatched <...> brackets ($bra open, $ket close) in '$field' field\n"
            if $bra != $ket;
    }
    { # check for matching «...»
        my $bra = () = m/«/g;  # count "«"
        my $ket = () = m/»/g;  # count "»"
        warn "mismatched «...» brackets ($bra open, $ket close) in '$field' field\n"
            if $bra != $ket;
    }
}

sub check_see {
    my ($_, $field, $record) = @_;
    if (my ($tlh) = $record =~ /^tlh:\t.*(\{.*})/) {
        warn "Reference '$_' points to itself '$field' field\n"
            if /$tlh/;
    } else {
        warn "Counldn't find a (Klingon) word within curly brackets in field 'tlh'\n";
    }
}

sub check_data {
    my ($_, $field, $record) = @_;
    if (/\b(deprecated|non-canon)\b/) {
        warn "when 'data' field contains 'deprecated' or 'non-canon', 'tlh' must have leading asterisk\n"
            unless $record =~ /^tlh:\t\*/m;
    }
    if (/\bphrase\b/) {
        warn "when 'data' field contains 'phrase', 'tlh' must contain at least one space\n"
            unless $record =~ /^tlh: \t [^{]* {[^{]*[ ] [^{]*} /mx;
    }
}

sub check_file {
    my ($_, $field, $record) = @_;
    foreach (split("; ", $_)) {
        my $abs = "$cfg{canon_path}/$_";
        my $rel = File::Spec->abs2rel($abs);
        warn "non-existant file '$rel' in 'file' field\n"
            unless -e $abs;
    }
}

sub check_meta {
    my ($_, $field, $record) = @_;
    warn "content of '$field' field must start with capital letter\n" unless /^( ["A-Z] | \*?\{ )/x;
    warn "content of '$field' field may not end with space or mid-sentence punctuation\n" if /[-,:;([{<«  ]$/;
}

sub check_pos {
    my ($_, $field) = @_;
    my $re = qr{
        verb(\s(prefix|suffix\stype\s([1-9]|rover)))?|
        noun(\ssuffix\stype\s[1-5])?|
        name|adverbial|conjunction|exclamation|numeral|pronoun|question\sword
    }x;
    if (not /^($re)$/) {
        warn "invalid part-of-speech in '$field' field\n";
        print STDERR "    $field: $_\n";
    }
}

# used for both 'def' and 'ref'
sub check_source {
    my ($_, $field) = @_;
    if (not source_ref_syntax($_)) {
        warn "invalid source reference in '$field' field\n";
        print STDERR "    $field: $_\n";
    }
}

sub check_cite {
    my ($_, $field, $record) = @_;
    if (m/.*\[(.*?)\]$/) {
        if (not source_ref_syntax($1)) {
            warn "invalid source reference '$1' in '$field' field\n";
            print STDERR "    $field: $_\n";
        }

    } else {
        warn "missing source reference in '$field' field\n";
    }
}

sub check_com {
    my ($_, $field, $record) = @_;
    warn "content of '$field' field may not end with space or mid-sentence punctuation\n" if /[-,:;([{<«  ]$/;
}

sub check_sv {
    my ($_, $field, $record) = @_;
    # may not end in puctuation (question mark is okay)
    warn "content of '$field' field may not end with space/punctuation\n"
        if /[-!.,:;([{<«  ]$/;
    if (/\((v|s|namn|adv|konj|interj|räkn|pro|fråg|ss[1-5]|vp|vs[1-9]s)\)/m) {
        warn "part-of-speech '($1)' may not be given inside '$field' field\n";
        print STDERR "    $field: $_\n";
    }
    # «...» are required except for affixes
    if (!/«/ and $record !~ /^pos:.*\b(suf|pre)fix\b/m) {
        warn "missing «...» brackets in '$field' $field\n";
        print STDERR "    $field: $_\n";
    }
    # <...> are not allowed
    if (/</) {
        warn "<...> brackets are not allowed in '$field' $field\n";
        print STDERR "    $field: $_\n";
    }
    { # check for matching «...»
        my $bra = () = m/«/g;  # count "«"
        my $ket = () = m/»/g;  # count "»"
        warn "mismatched «...» brackets ($bra open, $ket close) in '$field' field\n"
            if $bra != $ket;
    }
    { # dialect (check that [...] in 'en' and 'sv' fields correspond)
        my $lect = {
            "äldre ord eller överklassord" =>
                "older or upper-class word",
            arkaiskt  => "archaic",
            slang     => "slang",
            regionalt => "regional",
            "regionalt, slang" => "regional, slang",
        };
        while (/\[ ([^]]*) \]/gx) {
            if (not exists $lect->{$1}) {
                warn "unknown dialect description '[$1]' in '$field' field\n";
                next;
            }
            warn "missing dialect description in 'en' field to match '[$1]' " .
                "in '$field' field\n"
                unless $record =~ /^en:.*\[$lect->{$1}\]$/m;
        }
    }

}

sub check_desc {
    my ($_, $field, $record) = @_;
    warn "content of '$field' field may not start with capital letter\n"
        if /^[A-Z]/ and !/^I\b/;

    # check all ~...~ phrases
    my ($word) = $record =~ /^tlh:\t(.*)$/m;
    while (/~([^~]+)~/g) {
        my $_ = $1;
        warn "phrase '$_' may not start with capital letter in '$field' field\n"
            if /^[A-Z]/ and !/^I\b/;
        warn "phrase '$_' may not end with space/punctuation in '$field' field\n"
            if /[-.,:;([{<«  ]$/ and !/(?:subj|obj)\.$/;
    }

    # punctuation not allowed at eof, except as part of an abbrev
    warn "content of '$field' field may not end with space/punctuation\n"
        if /[-.,:;([{<«  ]$/ and !/(?:subj|obj)\.$/;
    warn "word '$1' should be abbreviated in '$field' field"
        if /\b( some(bod(y|ies)|ones?|things?) )\b/x;
}

sub check_tlh {
    my ($_, $field, $record) = @_;

    state $prev_word   = "";
    state $prev_pos    = "";
    state $prev_hyp    = 0;
    state $prev_sub    = 0;
    state $prev_subsub = 0;

    # get/check word counters
    my ($pre, $word, $post) = /^(.*?) (\*?\{[^{}]*\}) (.*?)$/x;
    warn "only single space allowed between pre-word data '$pre' and word '$word' in '$field' field\n"
        if $pre and $pre =~ s/(\s*)$// and length($1) != 1;
    warn "only single space allowed between word '$word' and post-word data '$post' in '$field' field\n"
        if $post and $post =~ s/^(\s*)// and length($1) != 1;

    if ($word =~ /\s/) {
        warn "when word in 'tlh' field contains space, 'data' field must contain 'phrase'\n"
            unless $record =~ /^data:.*\bphrase\b/m;
    }

    my ($pos) = $record =~ /^pos:\t(.*)/m;    # part-of-speech
    my $hyp = do {                            # pre-word counter
        if ($pre =~ /^\[ (\d+) \]$/x) {
            $1 // 0;
        } else {
            warn "malformed pre-word data '$pre' for '$word' in '$field' field\n" if $pre;
            0;
        }
    };
    my ($sub, $subsub) = do {                 # post-word counter and sub-counter
        if ($post =~ /^\[ (\d+)? (?:\.(\d+))? \]$/x) {
            ($1 // 0, $2 // 0);
        } else {
            warn "malformed post-word data '$post' for '$word' in '$field' field\n" if $post;
            (0, 0);
        }
    };
    if ($word eq $prev_word) {        # change (= clear counters)
        warn "duplicate entry '$word' in '$field' field\n"
            if $hyp == $prev_hyp and $sub == $prev_sub and $subsub == $prev_subsub;
        # check that counters did not disappear when they weren't supposed to
        warn "pre-word counter '[" . ($prev_hyp + 1) . "]' missing for '$word' in '$field' field\n"
            if $hyp == 0 and $prev_hyp > 1;
        warn "post-word counter '[" . ($prev_sub + 1) . "]' missing for '$word' in '$field' field\n"
            if $sub == 0 and $prev_sub > 0 and $hyp == $prev_hyp;
        warn "post-word sub-counter '[." . ($prev_subsub + 1) . "]' missing for '$word' in '$field' field\n"
            if $subsub == 0 and $prev_subsub > 0 and $sub == $prev_sub and $hyp == $prev_hyp;
    } else {
        warn  "pre-word ". "counter for previous entry stopped at '[1]' in '$field' field\n"  if $prev_hyp    == 1;
        warn "post-word ". "counter for previous entry stopped at '[1]' in '$field' field\n"  if $prev_sub    == 1;
        warn "post-word sub-counter for previous entry stopped at '[.1]' in '$field' field\n" if $prev_subsub == 1;
        ($prev_hyp, $prev_sub, $prev_subsub) = (0, 0, 0);
    }
    if ($hyp) {                                # pre-word counter
        if ($hyp != $prev_hyp + 1) {           #   invalid change in counter (not +1 change)
            warn "pre-word counter '[$hyp]' for '$word' may only increase by one in '$field' field\n"
                unless $hyp == $prev_hyp and ($sub or $subsub);
        } else {                               #   valid change (+1 change) -- clear subcounters
            if ($hyp == 1) {                   #     initialized (= set to one)
                warn "pre-word counter '[$hyp]' for '$word' may only be set to one when word changes, in '$field' field\n"
                    if $word eq $prev_word;
            } else {                           #     incremented
                warn "pre-word counter '[$hyp]' for '$word' may only increase when word remains same, in '$field' field\n"
                    if $word ne $prev_word;
            }
            warn "post-word ". "counter for previous entry stopped at '[1]' in '$field' field\n"  if $prev_sub    == 1;
            warn "post-word sub-counter for previous entry stopped at '[.1]' in '$field' field\n" if $prev_subsub == 1;
            ($prev_sub, $prev_subsub) = (0, 0);
        }
    }
    if ($sub) {                                # post-word counter
        if ($sub != $prev_sub + 1) {           #   invalid change in counter (not +1 change)
            warn "post-word counter '[$sub]' for '$word' may only increase by one in '$field' field\n"
                unless $sub == $prev_sub and $subsub; # no change -- maybe subcounter will change?
        } else {                               #   valid change (+1 change) -- clear subcounters
            if ($sub == 1) {                   #     initialized (= set to one)
                warn "post-word counter '[$sub]' for '$word' may only be set to one when word or higher counter change in '$field' field\n"
                    if $word eq $prev_word && $hyp == $prev_hyp;
            } else {                           #     incremented
                warn "post-word counter '[$sub]' for '$word' may only increase when part-of-speech change in '$field' field\n"
                    if $pos eq $prev_pos;
            }
            warn "post-word sub-counter for previous entry stopped at '[.1]' in '$field' field\n" if $prev_subsub == 1;
            $prev_subsub = 0;
        }
    }
    if ($subsub) {  # post-word sub-counter
        if ($subsub != $prev_subsub + 1) {     #   invalid change in counter (not +1 change)
            warn "post-word sub-counter '[.$subsub]' for '$word' may only increase by one in '$field' field\n";
        } else {                               #   valid change (+1 change) -- clear subcounters
            if ($subsub == 1) {                #     initialized (= set to one)
                warn "post-word sub-counter '[.$subsub]' for '$word' may only be set to one when word or higher counter change in '$field' field\n"
                    if $word eq $prev_word && $hyp == $prev_hyp && $sub == $prev_sub;
            } else {                           #     incremented
                warn "post-word sub-counter '[.$subsub]' for '$word' may only increase when part-of-speech remains same in '$field' field\n"
                    if $pos ne $prev_pos;
            }
        }
    }
    ($prev_word, $prev_pos, $prev_hyp, $prev_sub, $prev_subsub) = ($word, $pos, $hyp, $sub, $subsub);

    # check klingon spelling
    my $re = qr/ ([bDHjlmnpqQrStvwy']|ch|gh|ng|tlh)(
            [aeI] ([bDHjlmnpqQrStv']|ch|gh|ng|tlh|[wy]'?|rgh)? |
            [ou]  ([bDHjlmnpqQrStv']|ch|gh|ng|tlh|  y '?|rgh)?    # "ow" and "uw" is not allowed
    )/x;
    if (not $word =~ /^\*?\{ ($re+(\s$re+|\s«$re+»)*|$re?-|-$re) \}$/x) {
        # non-phonotactic word
        if ($record !~ /^data:\t.*\bnon-phonotactic\b/m) {
            warn "bad syllable structure for '$word' in '$field' field\n";
            print STDERR "    $field: $_\n";
        }
    } else {
        if ($record =~ /^data:\t.*\bnon-phonotactic\b/m) {
            warn "word '$word' incorrectly marked as 'data: non-phonotactic' " .
                "in '$field' field\n";
            print STDERR "    $field: $_\n";
        }
    }

    if (/^\*/) {
        warn "with leading asterisk in 'tlh' field 'warn' field must be present\n"
            if not $record =~ /^warn:\t/m;
        warn "with leading asterisk in 'tlh' field 'see' field must be present\n"
            if not $record =~ /^see:\t/m;
        warn "with leading asterisk in 'tlh' field 'data' field must contain 'deprecated' or 'non-canon'\n"
            if not $record =~ /^data:\t.*\b(deprecated|non-canon)\b/m;
    }
}

sub check_warn {
    my ($_, $field, $record) = @_;
    warn "content of '$field' field may not start with capital letter\n"
        if /^[A-Z]/ and !/^I\b/;
    warn "content of '$field' field may not end with space/punctuation\n"
        if /[-.,:;([{<«  ]$/;
    warn "leading asterisk required in 'tlh' field when '$field' field present\n"
        unless $record =~ /^tlh:\t\*/;

    if (/\bnon-canon\b/) {
        warn "tag 'non-canon' required in 'data' field when word 'non-canon' is " .
            "present in '$field' field\n"
            if $record !~ /^data:\t.*\bnon-canon\b/m;
    } elsif (/\bcanon\b/) {
        warn "tag 'deprecated' required in 'data' field when word 'canon' is " .
            "present in '$field' field\n"
            if $record !~ /^data:\t.*\bdeprecated\b/m;
    } else {
        warn "missing required word 'canon' or 'non-canon' in '$field' field\n";
    }
}

=pod

Usage: %RECORD = read_dict();

Reads all records from a zdb file into %RECORD. Keys of the hash will be the
line number each record started at. Values will be the complete content of the
record (with any continuation lines unwrapped).

=cut

sub read_dict {
    my ($section, $field_multiple) = @_;
    # skip header
    while (<>) {
        {
            my $_ = $_;
            s{ \t }{ " " x (8 - (pos() % 8)) }gex;  # replace tabs with spaces
            warn "line may not exceed width of 79 characters in line $.\n"
                if length($_) > 80; # 80 = is with trailing newline
        }
        last if /^=== start-of-$section-list ===$/;
    }
    die "failed to read dictionary, no section '$section' found in input\n"
        if eof();

    # read file up to footer (ignoring section separators)
    my $line   = -2; # -1 = blank line; -2 = separator; otherwise line number
    my %record = ();
    my %field_name = ();
    while (<>) {
        {
            my $_ = $_;
            s{ \t }{ " " x (8 - (pos() % 8)) }gex;  # replace tabs with spaces
            warn "line may not exceed width of 79 characters in line $.\n"
                if length($_) > 80; # 80 = is with trailing newline
        }
        if (/^=== end-of-$section-list ===$/) {
            last;
        }
        if (/^=== /) {
            warn "'=== TEXT ===' separator not preceeded by blank line or " .
                "separator in line $.\n"
                if $line >= 0;
            $line = -2;
            next;
        }
        if (/^$/) {
            warn "duplicate blank line in line $.\n" if $line == -1;
            $line = -1;
            next;
        }

        if (/^([^:\s]*):/) {                # new field
            warn "duplicate '$1' field in line $., in record at line $line\n"
                if $field_name{$1} ++ and !$field_multiple->{cite};
            if ($line < 0) {                #   if 1st in record
                warn "missing blank line before entry in line $., " .
                    "in record at line $line\n"
                    unless $line == -1;
                $line = $.;                 #     remember line
                %field_name = ();
                $record{$line} = "";        #     init record value
            }
        } elsif (/^\s/) {                   # continuation line
            warn "continuation line must start with tab in line $.\n"
                unless /^\t\S/;
            s/^\s+/ /;                      #   strip indenttion
            chomp($record{$line});          #   strip previous newline
        }
        $record{$line} .= $_;               # append value to record
    }

    return %record;
}


=pod

Usage: read_dict_ending();

Reads the last part of the dictionary (after the database sections), and checks
that all no lines exceed the character length limit, and that it does not
contain any database sections.

=cut

sub read_dict_ending {
    while (<>) {
        warn "unknown database section header '$&' in line $.\n"
            if /^=== (start|end)-.*? ===$/;
        my $_ = $_;
        s{ \t }{ " " x (8 - (pos() % 8)) }gex;  # replace tabs with spaces
        warn "line may not exceed width of 79 characters in line $.\n"
            if length($_) > 80; # 80 = is with trailing newline
    }
}


=pod

Usage: BOOL = fields_ok(\@REQUIRED, \@ORDER, \%SUBS, %RECORD);

Checks the order and existance of field names in %RECORD, warn()s if any
problems were found. Returns true if no warnings were outputted, FALSE
otherwise.

\@REQUIRED is a reference to a list containing the names of the required fiels
(in no particular order).

\@ORDER is a reference to a list containing the names of all allowed fields in
the order which they must occur within a record.

\%SUBS is a reference to a hash containing check functions for specified named
fields. (Fields for which there exist no check function is assumed to be valid
as-is.)

Field names to be checked are the keys, values are coderefs for functions
called to check the field content. Each code reference is called with the
following arguments (1) the content of the field (2) name of the field and (3)
the complete content of the record. Within the check function, call warn() with
the appropriate error message for each detected problem. Only if warn() never
was called does fields_ok() return true.

%RECORD should contain dict-type records as values, and with their line numbers
(in the original file) as keys. The keys of %RECORD are not tested in any way,
only outputted as a hint to the user of where (in the source file) a problem
was found.

=cut

sub fields_ok {
    my ($field_required, $field_order, $field_subs, %record) = @_;
    my $result = TRUE;

    my $field_subs_re = do {
        my $x = join("|", sort keys %$field_subs);
        qr/$x/ if $x;
    };

    # field name -> field number hash
    # (used to check that fields come in right order within record)
    my %field_number = do {
        my $count = 1;
        map { $_ => $count++ } @$field_order;
    };

    # check fields
    foreach my $line (sort numerically keys %record) {
        my $_ = $record{$line};  # record content

        local $SIG{__WARN__} = sub {
            chomp(my @x = @_);
            $result = FALSE;
            warn "@x, in record at line $line\n";
        };

        # check that required fields exist
        foreach my $field (@$field_required) {
            if (not /^$field:\t/m) {
                warn "missing required field '$field'\n";
            }
        }

        # check field order
        my $num = -1;
        while (/^([^:\s]*):/gm) {
            my $field = $1;
            if (not exists($field_number{$field})) {
                warn "unknown field '$field'\n";
                next;
            }
            if ($field_number{$field} < $num) {
                warn "field '$field' is too late in field order\n";
                next;
            }
            $num = $field_number{$field};
        }

        if ($field_subs_re) {
            while (/^($field_subs_re): \t (.*) /gmx) {
                $field_subs->{$1}($2, $1, $_);
            }
        }

    }
    return $result;
}

sub source_ref_syntax {
    my ($_) = @_;
    my $s  = qr/[  ]/x;                                     # spaces
    my $p  = qr/[ivx]+|\d+/x;                               # a page number
    my $pp = qr/ p\.$p | pp\.$p(--$p|(,$s$p(--$p)?)+) /x;   # p.#PAGE or pp.#RANGE

    my $chapter  = qr/[0-9]+(\.[0-9]+)+ ($s\($pp\))?/x;     # CHAPTER [ (PAGE) ]
    my $chapters = qr/$s$chapter(,$s$chapter)*/x;           # CHAPTER [ (PAGE) ], ...

    # page numbers, chapter numbers, 'E-K' or 'K-E'
    my $tkd_ref  = qr/(K-E|E-K|$chapter|$pp)/x;             #
    my $tkd_refs = qr/ $s $tkd_ref(, $s $tkd_ref)*/x;       #

    # page numbers, 'E-K' or 'K-E'
    my $kgt_ref  = qr/(K-E|E-K|$pp)/x;
    my $kgt_refs = qr/ $s $kgt_ref(, $s $kgt_ref)*/x;

    # simple page numbers
    my $page_refs = qr/ $s $pp(, $s $pp)*/x;

    my $by    = qr/by$s[^()]+/;         # "by ..."
    my $to    = qr/to$s[^()]+/;         # "to ..."
    my $url   = qr/https?:\/\/[^()]+/;  # "http://..."
    my $subj  = qr/"[^"]+"/;            # "..."
    my $date  = qr/\d{4}-\d{2}-\d{2}/;  # "YYYY-MM-DD"
    my $mdate = qr/\d{4}-\d{2}/;        # "YYYY-MM"

    my $holqed_source  = qr/HQ\d{1,2}:[1-4]+ $page_refs? (?: $s \( $subj \))/x;
    my $paged_source   = qr/( TKDa? $tkd_refs? |KGT $kgt_refs? | (DI|Eurotalk|Sarek|TKW) $page_refs?) ($s et $s al\.)? /x;
    my $unpaged_source = qr{
        BoP|CK|PK|KCD|KLINW|TDNW|Radio $s Times|
        S7|S8|S14|S15|S20|S25|S26|S32|S33|ST1|ST5|STE|
        \{qep'a'\} $s \d{4}                                          |
        Email      $s $date   $s \($by, $s $to    , $s $subj   \)    |
        News       $s $date ( $s \($by, $s $to (?:, $s $subj)? \) )? |
        Web        $s $date   $s \($by, $s $url   , $s $subj   \)    |
        Recording  $s $mdate  $s \(.*?                         \)
    }x;

    my $source       = qr/$paged_source|$holqed_source|$unpaged_source/x;

    return /^ $source (;$s$source)* $/x ? TRUE : FALSE;
}


###############################################################################
##                                                                           ##
##  Main                                                                     ##
##                                                                           ##
###############################################################################

my ($prefix_count, $suffix_count, $word_count, $marked_count) = (0, 0, 0, 0);
foreach my $section (qw/word verb-prefix verb-suffix noun-suffix/) {
    my %record = read_dict($section, $cfg{field_multiple});

    fields_ok(@cfg{qw(field_required field_order field_subs)}, %record);

    # check sort order in dictionary
    my $last_sortkey = "";
    my $last_word    = "";
    foreach my $line (sort numerically keys %record) {
        my $_ = $record{$line};

        if (/^tlh:\t/m) {
            my ($marked, $word) = /^tlh:\t .*? (\*?) \{([^}]*)\} .*? $/xm;
            $marked_count ++ if $marked;
            print "$record{$line}\n";
            given ($word) {
                when (/-$/) { $prefix_count ++ }
                when (/^-/) { $suffix_count ++ }
                default     {   $word_count ++ unless $marked }
            }
            my $sortkey = sortkey_tlh($word);
            my $order   = ($last_sortkey cmp $sortkey);
            if ($order == 1) {
                warn "wrong sort order: {$last_word} comes before {$word}, " .
                    "in record at line $line\n";
            }
            $last_sortkey = $sortkey;
            $last_word    = $word;
        }
    }
}
read_dict_ending();

warn "Word count: $word_count (" .
    "prefixes: $prefix_count, " .
    "suffixes: $suffix_count, " .
    "*deprecated: $marked_count)\n";

#[eof]

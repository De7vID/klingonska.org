function dump(something) {
    $('#log').html(
        tag(
            'pre',
            JSON.stringify(
                filter(something, function (prop) { return prop !== 'container'; }),
                null,
                4
            )
        ) +
        tag('p', 'Length: ' + something.contents.length)
    );
}



function filter(obj, filter) {
    var filtered = {};
    for (var prop in obj) {
        if (obj.hasOwnProperty(prop) && filter(prop, obj[prop])) {
            filtered[prop] = obj[prop];
        }
    }
    return filtered;
}


// alert(
//     JSON.stringify(
//         filter(this, function (prop) {
//             return prop !== 'container';
//         }),
//         null,
//         4
//     )
// );






// create one HTML tag
function tag(tag, content, attr) {
     content = content || '';
     return '<' + tag + (attr ? ' ' + attr : '') + '>' +
         content + '</' + tag + '>';
}


function makeTableArray(opts) {
    var object = {};
    if (Object.prototype.toString.call(opts) !== '[object Object]') {
        throw new TypeError('makeTableArray() argument must object with options');
    }
    if (!makeTableArray.tableArrayPrototype) { // on first invokation
        makeTableArray.tableArrayPrototype = { //   create prototype w/ methods
            redraw: function () {
                var that = this,
                    titles = that.cells.map(function (field) {
                        return tag('th', that.titles[field]);
                    }),
                    content = that.contents.map(function (row, index) {
                        return tag('tr', that.cells.map(function (field) {
                            return tag('td', row[field], 'contenteditable class=' + field);
                        }).join(''), 'data-index=' + index);
                    }).join('');
                that.container.html(
                    tag('table', tag('tr', titles.join('')) + content)
                );
            },
            cmd: function (cmd, args) {
                var result = Array.prototype[cmd].apply(this.contents, args);
                this.redraw();
                dump(this);  // DEBUG
                return result;
            },
            sort:    function () { return this.cmd('sort',    arguments); },
            reverse: function () { return this.cmd('reverse', arguments); },
            splice:  function () { return this.cmd('splice',  arguments); },
            pop:     function () { return this.cmd('pop',     arguments); },
            push:    function () { return this.cmd('push',    arguments); },
            shift:   function () { return this.cmd('shift',   arguments); },
            unshift: function () { return this.cmd('unshift', arguments); }
        };
    }
    object = Object.create(                    // create object
        makeTableArray.tableArrayPrototype
    );
    for (var prop in opts) {                   // insert options into object
        if (opts.hasOwnProperty(prop)) { object[prop] = opts[prop]; }
    }
    object.redraw();                           // redraw HTML table
    dump(opts); // DEBUG
    return object;
}


/////////////////////////////////////////////////////////////

// sort() function
function by(field, reverse, primer) {
    'use strict';
    var key = primer ?
        function (x) { return primer(x[field]); } :
        function (x) { return x[field]; }
    return function (a, b) {
        var A = key(a), B = key(b);
        return  (A < B ? -1 :
                (A > B ?  1 : 0)) * [1,-1][+!!reverse];
    }
}

var table = makeTableArray({
        container: $('#table'),
        cells: [ 'tlh', 'pos', 'en' ],
        titles: {
            tlh: 'Klingon',
            pos: '<abbr title="Part-of-Speech">Type</abbr>',
            en:  'English'
        },
        contents: [
            { tlh: 'bach', pos: 'n', en: 'shot' }
        ]
    }
);


table.push({ tlh: 'bach', pos: 'v', en: 'shoot' });

//eof

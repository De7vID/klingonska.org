//
// FIXME: Put the HTML/DOM stuff back using the callback
//

// create one HTML tag
function tag(tag, content, attr) {
     content = content || '';
     return '<' + tag + (attr ? ' ' + attr : '') + '>' +
         content + '</' + tag + '>';
}

function log(str) {
    $('#log').append('<br>&gt;' + str);
}

function dump(someArray) {
    $('#dump').html(
        tag('pre', JSON.stringify(someArray, null, 4)) +
        tag('p', 'Length: ' + someArray.length)
    );
}

// sort() function
function by(field, reverse, primer) {
    'use strict';
    var key = primer ?
        function (x) { return primer(x[field]); } :
        function (x) { return x[field]; }
    return function (a, b) {
        var A = key(a), B = key(b);
        return  (A < B ? -1 :
                (A > B ?  1 : 0)) * [1,-1][+!!reverse];
    }
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////


function redraw() {
    var that = this,
        titles = that.cells.map(function (field) {
            return tag('th', that.titles[field]);
        }),
        content = that.contents.map(function (row, index) {
            return tag('tr', that.cells.map(function (field) {
                return tag('td', row[field], 'contenteditable class=' + field);
            }).join(''), 'data-index=' + index);
        }).join('');
    that.container.html(
        tag('table', tag('tr', titles.join('')) + content)
    );
}


function changed(index, oldValues, newValues) {
    log(tag('pre', 'at position: ' + index +
        '\nremoved: ' + JSON.stringify(oldValues, null, 4) +
        '\nadded: '   + JSON.stringify(newValues, null, 4) + '\n\n'
    ));
    return true;
}

var thingy = new HookedArray();
thingy.push([
    { tlh: 'bach', pos: 'n', en: 'shot'  },
    { tlh: 'bach', pos: 'v', en: 'shoot' }
]);
thingy.postChange(changed);
thingy.push([
    { tlh: 'paq', pos: 'n', en: 'book'  }
]);

dump(thingy);

// eof

#!/usr/bin/perl
use strict;
use warnings;
use 5.10.0;
use utf8;
use open ':locale';
use lib do {
    use Cwd "realpath";
    my $path = (__FILE__ =~ m#^(.*)/#) ? $1 : ".";
    realpath("$path/../perl");
};
use KA::Help;
use vars qw($NAME $VERSION $YEAR);
$VERSION = "0.1a";
$YEAR    = "2012-2013";
$NAME    = "dict2paqhom-html";

use Data::Dumper;
$Data::Dumper::Sortkeys = 1;
$Data::Dumper::Indent   = 1;

use Klingon qw/split_letter/;

{
    package zdb;
    sub is_class   {     shift  eq __PACKAGE__ }
    sub is_self    { ref(shift) eq __PACKAGE__ }
    sub is_hashref { ref(shift) eq 'HASH' }

    sub new {
        my ($class, $opt) = @_;
        is_class($class) or die __PACKAGE__ . "::new(): Not called as an object constructor\n";
        is_hashref($opt) or die __PACKAGE__ . "::new(): Argument must be hashref\n";
        my $self = bless({
            dictionary => [],
            count      => 0,
        }, $class);
        $self->set($opt);
        return $self;
    }

    sub set {
        my ($self, $opt) = @_;
        is_self($self)   or die __PACKAGE__ . "->set(): Not called as an object method\n";
        is_hashref($opt) or die __PACKAGE__ . "::set(): Argument must be hashref\n";
        while (my ($name, $value) = each(%$opt)) {
            $self->{$name} = $value;
        }
    }

    sub load {
        my ($self, $opt) = @_;
        my $text = read_file($self->{file});
        foreach ($text) {
            s/^.*\n=== start-of-word-list ===\n+//s;
            s/\n+=== end-of-word-list ===\n.*$//s;
        }

        foreach my $entry (split(/\n{2,}/, $text)) {  # foreach entry
            my %entry = ();
            foreach my $field (split(/\n(?=[a-z]+:)/, $entry)) {
                my ($name, $value) = split(/:\s+/, $field, 2);
                chomp $value;
                $value =~ s/^\s+//mg;
                $entry{$name} = $value;
            }
            $entry{en}  =~ s/\s*\[(.*?)\]$// and $entry{use} = $1;
            $entry{tlh} =~ s/\{(.*)\}( \(\d+\))?/$1/;
            s/[<>«»]//g foreach @entry{qw/en sv tlh/};
            push @{ $self->{dictionary} }, \%entry;
        }
        return $self;
    }

    sub entry {
        my ($self, $number) = @_;
        $number = $self->{count} unless defined($number);
        $self->{count} ++;

        return $self->{dictionary}[$number];
    }

    sub read_file {
        my ($file) = @_;
        open my $in, "$file" or die "Cannot open file '$file' for reading: $!\n";
        return join("", <$in>);
    }

}

###############################################################################
##                                                                           ##
##  Functions                                                                ##
##                                                                           ##
###############################################################################

sub help {
    KA::Help::usage(<<EOF);
EOF
}

sub header {
    return <<EOF;
<!DOCTYPE HTML>
<html>
  <head>
    <style><!--
    klcp {
        padding-left: .1em;
        font-family: Verdana, sans;
    }
    .lemma {
        font-family: Verdana, sans;
    }
    klcp, sup, sub {
        height: 0;
        line-height: 1;
        vertical-align: baseline;
        _vertical-align: bottom;
        position: relative;
    }
    klcp, sup { bottom: .5ex; }
    sub { top: .25ex; }

    sans {
        font-family: Verdana, sans;
        font-weight: bold;
    }
    .sans {
        font-family: Verdana, sans;
    }
    p {
        margin: 0em;
        text-indent: -.75em;
        padding-left: .75em;
    }
    p.blank {
        margin-top: 1em;
    }
    html { background-color: #bbb; }
    body {
        padding: .25em 1em;
        max-width: 15em;
        background-color: white;
        font-family: Georgia, serif;
    }
    .red {
        background-color: yellow;
    }

    /* floater element reporting page height */
    #stat {
        background: transparent;
        text-shadow: 0px 0px 3px black;
        left: 15em;
        color: white;
        position: fixed;
        top: .25em;
    }
    --></style>
  </head>
</head>
  <body>
    <div id="stat"></div>
EOF
}

sub footer {
    return <<EOF;
<script><!--
/* set content of floater-thingy to height of page content in pixel
 * (if content is smaller than one screen, probably will report screen height
 */
document.getElementById('stat').innerHTML = 'Body height: ' + document.documentElement.scrollHeight + ' px';
--></script>
  </body>
</html>
EOF
}

sub tlh {
    my ($text) = @_;
    foreach ($text) {
        s/'/&rsquo;/g;
        s#(-[\w']+)#<nobr>$1</nobr>#g;                   # dont break -SUF
    }
    return $text;
}

sub en {
    my ($text) = @_;
    foreach ($text) {
        s#/#/<wbr>#g;                                    # allow word break after slash
        s#\b([KE])-([KE])\b#<nobr>$1--$2</nobr>#;        # en-dash for "E-K" / "K-E"
        s#(\d+--\d+)#<nobr>$1</nobr>#g;                  # dont break XX--YY
        s#\b(\d{2,4}-\d{2}-\d{2})\b#<nobr>$1</nobr>#g;   # dont break YYYY-MM-DD
        s#--#&ndash;#g;
        s{\{(.*?)\}}{                                    # klingon
            '<b lang="tlh">' . tlh($1) . "</b>";
        }ges;
        s#~(.*?)~([[:punct:]]{0,3})#<i>$1$2</i>#gs;
        s#(?:^|(?<=\s))'#&lsquo;#g;  # single quotes
        s#'#&rsquo;#g;
        s#(?:^|(?<=\s))"#&ldquo;#g;  # double quotes
        s#"#&rdquo;#g;
    }
    return $text;
}

sub attr {
    my %hash = @_;
    return join " ", map {
        my $value = $hash{$_};
        if (not defined $value) {         # undef
            ();
        } elsif (my $type = ref($value)) {# reference
            if ($type eq "ARRAY") {
                @$value ? " $_=\"" . join(" ", sort @$value) . "\"" : ();
            } else {
                die "attr(): Unknown reference type (only arrayrefs are allowed)\n";
            }
        } else {                          # scalar
            $value eq ""
                ? " $_"               #   '' = no value
                : " $_=\"$value\"";   #
        }
    } sort keys %hash;
}

###############################################################################
##                                                                           ##
##  Initialization                                                           ##
##                                                                           ##
###############################################################################

use Getopt::Long qw(
    :config posix_default bundling gnu_compat no_ignore_case permute
);
GetOptions(                             # info displayed by help()
    'help|h'     => \&help,             ### display this help and exit
    'manpage|M'  => \&KA::Help::manpage,### display program manpage and exit
    'version|V'  => \&KA::Help::version,### output version information and exit
) or exit 255;

die "$NAME: Missing input: Nothing on standard input, and no file specified\n" .
    "Use '$NAME --help' for more information.\n"
    if -t STDIN and @ARGV == 0;

###############################################################################
##                                                                           ##
##  Main                                                                     ##
##                                                                           ##
###############################################################################

my ($file) = @ARGV
    or die do {
        my ($bin) = __FILE__ =~ m#([^/]*)$#;
        "$bin: No dictionary file specified\n";
    };

my $zdb = new zdb({ file  => $file })->load;
my %pos = (
    adverbial   => "adv",
    conjunction => "conj",
    exclamation => "excl",
    name        => "name",
    noun        => "n",
    numeral     => "num",
    pronoun     => "pro",
    "question word" => "ques",
    verb        => "v",
);

print header();
my $previous_pos    = "";
my $previous_word   = "";
my $previous_letter = "";
my $previous_subdef = "";
my $previous_subsubdef = "";
Klingon::add_alpha(" ");
my $i = 0;
use Roman;   # deb package: libroman-perl
while (defined(my $entry = $zdb->entry)) {
    #die if $i++ == 10;
    next if $entry->{tlh} =~ /^\*/;

    my @pclass = ();
    my $hypdef    = 0;
    my $subdef    = 0;
    my $subsubdef = 0;
    my $word   = $entry->{tlh};
    $word =~ s/\s*\[(\d*)(?:\.(\d+))?\]$//
        and ($subdef, $subsubdef) = ($1 || 0, $2 // 0);
    $word =~ s/^\[(\d*)\]\s*//
        and $hypdef = $1;
    my $pos     = $pos{$entry->{pos}};
    my $desc    = $entry->{desc} // "";         # FIXME en() ?
    for ($desc) {
        s/\s*\(lit\.[^)]*\)//;                      # (lit. ... )
        s/\s*\[[A-Z] [^][]* (?:\[ [^][]* \][^][]*)? \]//gx; # [X....]
        s/\b(\d+)\spounds?\b/$1 lb/g;
        s/\b(\d+)\skilograms?\b/$1 kg/g;
        s/\b(\d+)\skilometers?\b/$1 km/g;
        s/\b(\d+)\scentimeters?\b/$1 cm/g;
        s/\b(\d+)\sinches?\b/$1&#8243;/g;
        s/\b(\d+)\sliters?\b/$1 L/g;
        s/\b(\d+)\squarts?\b/$1 qt/g;
        s/\b(\d+)\s(?:feet|foot)\b(\s+(?=\d))?/"$1&#8242;". (defined($2) && " ")/ge;
        s/(?<=\d)\.25\b/¼/g;
    }
    $desc = en($desc);
    my $english = en($entry->{en});
    if ($english =~ /^be\b/) {
        $english =~ s/,\s+be/, /g;
    }

    my $letter = split_letter($word);
    my $klcp = '';
    $klcp = '<klcp>&bull;</klcp>'
        if exists($entry->{data}) and $entry->{data} =~ /KLCP-1/;

    my $def = do {
        my $_ = en($entry->{def});
        s/\s*\([^()]*(?:\([^()]*\))?[^()]*\)//s;
        $_;
    };

    push(@pclass, "blank") if $letter ne $previous_letter;
    push(@pclass, "red")   if $word eq $previous_word and !$hypdef;

    if ($subsubdef <= 1) {
        if ($subdef <= 1) { #$word ne $previous_word) {
            print "</p>\n" if $previous_word;
            print "<p" . attr(class => \@pclass) . ">";
            print "<sans>$hypdef</sans> " if $hypdef;
            print '<b class="lemma">' . tlh($word) . '</b>';
        }
        print "<nobr>";
        print     " <sans>" . Roman($subdef) . "</sans>" if $subdef;
        print     " <i>$pos</i>";
        print "</nobr>";
    }

    # see: {WORD} is the plural/singular form
    if (($entry->{see} // "") =~ /(?:^|;\s*){([^}]*)} is the (singular|plural) form/) {
        my ($word, $form) = ($1, $2);
        if ($form eq "singular") {
            # this word is plural (output that + suppress English meaning)
            print ' <small>pl. of <b lang="tlh">'.$word.'</b></small>';
            $english = "";
        } elsif ($form eq "plural") {
            # this word is singular (include link to plural form)
            print ' <small>(pl. <b lang="tlh">'.$word.'</b>)</small>';
        }
    }

    print " <sans>$subsubdef</sans>" if $subsubdef;

    print ' <small>' . en($entry->{use}) . '</small>' if exists($entry->{use});
    print " $english$klcp" if $english;
    print " <small>$desc</small>" if $desc;
    #$def =~ s/\b\d\d(\d\d-\d\d-\d\d\b)/$1/g; # YYYY-MM-DD -> YY-MM-DD
    print " <small>[$def]</small>" if $def ne "TKD";

    $previous_pos       = $pos;
    $previous_word      = $word;
    $previous_letter    = $letter;
    $previous_subdef    = $subdef;
    $previous_subsubdef = $subsubdef;
}
say '  </p>';
print footer();
warn "Done.\n";

__END__

=head1 NAME

dict2paqhom-html - convert ZDB file to HTML page


=head1 SYNOPSIS

B<dict2paqhom-html> [I<OPTION>]... [I<FILE>]


=head1 DESCRIPTION

This script converts a ZDB file into a HTML file with a layout similar
Klingon--English side of the pocket dictionary.

It is written to try out different ideas of dictionary layout, and attempting
to find something suitable for a future version of the paper dictionary.


=head1 AUTHOR

Written by zrajm <zrajm@klingonska.org>, 2012-2013.


=head1 COPYRIGHT AND LICENSE

Copyright 2012-2013 zrajm <zrajm@klingonska.org>.

Distributed under Creative Commons Attribution-ShareAlike 3.0 Unported (CC
BY-SA 3.0) http://creativecommons.org/licenses/by-sa/3.0/

This means that you may copy, sell and change the program in any way you like,
as long as you still attribute it to this author, and release your modified
version under the same license.


=head1 SEE ALSO

Take a look at the database file itself for a description of its format
http://klingonska.org/dict/dict.zdb.

For a web interface to the dictionary, see Klingonska Akademien's I<Online
Klingon Pocket Dictionary> (at http://klingonska.org/dict/), and for other
stuff about the Klingon language, see Klingonska Akademien's web site in
general http://klingonska.org/.

=cut

#[eof]

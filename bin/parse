#!/usr/bin/perl
use strict;
use warnings;
use 5.10.0;
use lib do {
    use Cwd "realpath";
    my $path = (__FILE__ =~ m#^(.*)/#) ? $1 : ".";
    realpath("$path/../perl");
};

# TODO
#   o LaTeX output for actual dictionary suffix guide.
#   o Links (esp. links not defined inline).
#   o Numbered lists must be able to get item number.
#   o Implement full markdown.
#   o Implement nested structures. (e.g. *emphasised *doubly emphasised**)
#

my $WIDTH = 79;  # number of columns to use in word wrap


###############################################################################
##                                                                           ##
##  Functions                                                                ##
##                                                                           ##
###############################################################################

sub help {
    print <<"EOF";
Usage: $0 OPTION < FILE.txt
Parse markdown input and give output in specified format.

  -a,--apply=FILE   load transformer from FILE
  -h,--help         display this information
  -i,--input=FILE   load parser from FILE (required)
  -l,--list         output contexts template for new parser
  -o,--output=FILE  load composer from FILE
  -p,--plot         output graphviz program for plotting parser contexts
  -R,--raw          output "raw" parse tree (default)
     --html         output HTML ("data/composer-html")
     --markdown     output Markdown ("data/composer-markdown")
EOF
}

# Usage: $NEWTREE = insert_branch($FINDBRANCH, $INSERTBRANCH, @TREE);
#
# Moves a subsection of $TREE (from $FINDBRANCH and onwards, up until the next
# occurance of $FINDBRANCH if any) into a new branch (called $INSERTBRANCH).
#
# Only the first level of branches in $TREE traversed (i.e. the search is not
# recursive).
#
# Example: assuming the following tree to begin with:
#
#     $tree = [
#       [ a => "" ],
#       [ b => "" ],
#       [ a => "" ],
#       [ b => "" ],
#       [ c => "" ],
#     ]
#
# If we now call insert_branch() $tree using '$newtree = insert_branch("b",
# "new", $tree);' the resulting newtree will look like this:
#
#     $newtree =[
#       [ a => "" ],
#       [ new =>
#         [ b => "" ],
#       ],
#       [ new =>
#         [ b => "" ],
#         [ c => "" ],
#       ],
#     ]
#
sub first { ${shift()}[0] }
sub insert_branch {
    my ($findbranch, $newtree, @tree) = @_;
    my (@whole, @part) = ();
    for (@tree) {
        if (first($_) eq $findbranch) {
            push(@whole, [ $newtree => @part ]) if @part;
            @part = ();
        }
        if (@part) {
            push(@part, $_);
        } else {
            push(@whole, $_);
        }
    }
    push(@whole, [ $newtree => @part ]) if @part;
    return @whole;
}


###############################################################################
##                                                                           ##
##  Main Program                                                             ##
##                                                                           ##
###############################################################################

my $bad = 0;
my %cfg = (
    command  => "",      # do what?
    output   => "",      # output format
    input    => undef,   # input format
);
%SIG = (
    __DIE__  => sub { warn         "$0: ", @_; exit 255 },
    __WARN__ => sub { print STDERR "$0: ", @_; $bad++   },
);

# parse command line options
{
    my @arg = ();
    while (@ARGV) {
        local $_ = shift();
        unshift(@ARGV, $1) if s/ = (.*) $ //x;
        m/^--$/           and do { last,                     next };
        m/^(-h|--help)$/  and do { help();                   exit };
        m/^(-a|--apply)/  and do { $cfg{apply}   = shift();  next };
        m/^(-i|--input)/  and do { $cfg{input}   = shift();  next };
        m/^(-l|--list)/   and do { $cfg{command} = "list";   next };
        m/^(-o|--output)/ and do { $cfg{output}  = shift();  next };
        m/^(-p|--plot)/   and do { $cfg{command} = "plot";   next };
        m/^--html$/       and do { $cfg{output}  = "./usr/parse-data/composer-html";     next };
        m/^--markdown$/   and do { $cfg{output}  = "./usr/parse-data/composer-markdown"; next };
        m/^(-R|--raw)$/   and do { $cfg{output}  = "";       next };
        m/^-/             and do { warn "unknown option '$_'\n";  next };
        push @arg, $_;
    }
    warn "no --input given\n" unless defined($cfg{input});
    exit 255 if $bad;
    @ARGV = (@arg, @ARGV);
}

use ParserComposer;
my $block = new ParserComposer(
    parser      => $cfg{input},
    composer    => $cfg{output},
    transformer => $cfg{apply},
);

if ($cfg{command} eq "plot") {
    print $block->plot_contexts();
    exit;
} elsif ($cfg{command} eq "list") {
    print "# -*- perl -*-\n",
        "my \$WIDTH = $WIDTH;\n",
        "{\n",
        sort(map { "    $_ => sub { },\n" } $block->context()),
        "};\n",
        "#[eof]\n";
    exit;
}

die "nothing to read on standard input\n" if -t 0;

my $text = join("", <>);
$text =~ s/^TODO.*//sm; # strip everything after 1st "TODO"

$text =~ s/(?<=\n)\n*\Q[eof]\E\n+$//; # strip everything after 1st "TODO"


my $tree = $block->parse([ "root", $text ]);

# my $rules = {
#     "suffix_guide" => sub {
#         my $name = shift();
#         return [ $name => insert_branch("sg_head2", "sg_div2", @_) ];
#     },
# };

($tree) = $block->transform($tree);

print $block->compose($tree);

# [eof]
